import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useRef } from "react";
import React from "react";
import { useSelector, useDispatch } from "react-redux";
import citiesData from "../cities.json";
import CustomModal from "../components/CustomModal";
import { SearchIcon } from "@heroicons/react/solid";
import { fetchWeatherForecast } from "./api/fetchWeatherForecast";
import { fetchWeatherToday } from "./api/fetchWeatherToday";
import LoginButton from "../components/LoginButton";
import RightPanel from "../components/RightPanel";
import WeatherForecastPanel from "../components/WeatherForecastPanel";
import { handleAddTrip } from "../helpers/handleAddTrip";
import TripContainer from "../components/TripContainer";

export default function Home() {
  const [searchInput, setSearchInput] = useState("");
  const trips = useSelector((state) => state.trips);
  const dispatch = useDispatch();
  const [newTrip, setNewTrip] = useState({
    city: "",
    startDate: "",
    endDate: "",
    imageUrl: "",
  });
  const handleAddTripClick = () => {
    handleAddTrip(newTrip, dispatch, citiesData);
    setNewTrip({
      city: "",
      startDate: "",
      endDate: "",
      imageUrl: "",
    });
  };
  const [selectedTrip, setSelectedTrip] = useState(null);
  const [weatherForecast, setWeatherForecast] = useState(null);
  const [weatherToday, setWeatherToday] = useState(null);
  const fetchWeatherData = (city, startDate, endDate) => {
    Promise.all([
      fetchWeatherForecast(city, startDate, endDate),
      fetchWeatherToday(city),
    ])
      .then(([forecast, today]) => {
        setWeatherForecast(forecast);
        setWeatherToday(today);
      })
      .catch((error) => console.error(error));
  };

  useEffect(() => {
    if (selectedTrip) {
      const { city, startDate, endDate } = selectedTrip;
      fetchWeatherData(city, startDate, endDate);
    }
  }, [selectedTrip]);

  const handleTripClick = (trip) => {
    setSelectedTrip(trip);
  };
  const [isModalOpen, setIsModalOpen] = useState(false);
  const openModal = () => {
    setIsModalOpen(true);
  };
  const closeModal = () => {
    setIsModalOpen(false);
  };
  const filteredTrips = trips.trips.filter((trip) =>
    trip.city.toLowerCase().includes(searchInput.toLowerCase())
  );
  console.log(weatherForecast);
  return (
    <div className="">
      <Head>
        <title>Trip App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="ml-6 flex gap-7 justify-between">
          <div className="w-[600px] flex-1">
            <div className="">
              <div className="flex justify-between pt-4">
                <div className="text-xl mt-1 text-gray-800 font-semibold hover:cursor-pointer">
                  Weather <span className="font-bold">Forecast</span>
                </div>
                <LoginButton />
              </div>
              <div className="flex bg-gray-200 rounded-md h-[40px] w-[220px] justify-center gap-2 my-6">
                <div className="pt-1 pl-2">
                  <SearchIcon className="h-8 p-1 text-gray-800 rounded-full cursor-pointer" />
                </div>
                <input
                  value={searchInput}
                  onChange={(e) => setSearchInput(e.target.value)}
                  className="bg-transparent font-semibold outline-none text-sm text-gray-700 placeholder-gray-700 hidden md:block"
                  type="text"
                  placeholder={"Search your trip"}
                />
              </div>
              <TripContainer
                filteredTrips={filteredTrips}
                handleTripClick={handleTripClick}
                openModal={openModal}
              />
              <WeatherForecastPanel
                selectedTrip={selectedTrip}
                weatherForecast={weatherForecast}
              />
            </div>
          </div>
          <CustomModal
            isOpen={isModalOpen}
            onClose={closeModal}
            newTrip={newTrip}
            onChange={setNewTrip}
            onAddTrip={handleAddTripClick}
          />
          <RightPanel selectedTrip={selectedTrip} weatherToday={weatherToday} />
        </div>
      </main>
    </div>
  );
}
